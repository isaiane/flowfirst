// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  createdAt     DateTime  @default(now())
  workspacesCreated Workspace[] @relation("WorkspaceCreatedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  createdById String
  createdBy   User          @relation("WorkspaceCreatedBy", fields: [createdById], references: [id])
  memberships Membership[]
  flows       Flow[]
  createdAt   DateTime      @default(now())
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id           String    @id @default(cuid())
  userId       String
  workspaceId  String
  role         Role      @default(MEMBER)
  user         User      @relation(fields: [userId], references: [id])
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
}

model Flow {
  id          String     @id @default(cuid())
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  name        String
  definition  Json
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  executions  FlowExecution[]

  @@map("flows")
}

model FlowExecution {
  id          String     @id @default(cuid())
  flowId      String     @map("flow_id")
  flow        Flow       @relation(fields: [flowId], references: [id])
  status      ExecStatus @default(PENDING)
  input       Json?
  result      Json?
  createdAt   DateTime   @default(now()) @map("created_at")
  startedAt   DateTime?  @map("started_at")
  finishedAt  DateTime?  @map("finished_at")

  logs        FlowLog[]

  @@map("flow_executions")
}

model FlowLog {
  id           String        @id @default(cuid())
  executionId  String        @map("execution_id")
  execution    FlowExecution @relation(fields: [executionId], references: [id])
  level        LogLevel      @default(INFO)
  message      String
  data         Json?
  timestamp    DateTime      @default(now())

  @@map("flow_logs")
}

enum ExecStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum LogLevel {
  INFO
  WARN
  ERROR
}
